# 题目描述
#
# 给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​
# 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
# 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
# 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
#
# 示例:
# 输入: [1,2,3,0,2]
# 输出: 3
# 解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

# 动态规划：
# 子问题定义：
#   dp[i] 表示第i天的利润, state[i] 表示第i天的状态，即买入、卖出、冷冻期中其中一种
# 转移函数定义：
#   dp[i] = prices[i] - prices[i - 1] if state[i - 1] = '买入'
#   dp[i] = dp[i - 1] if state[i - 1] != '买入'
#   state[i] = '买入' if i == 0 or state[i - 1] = '冷冻期'
#   state[i] = '卖出' if state[i - 1] = '买入'
#   state[i] = '冷冻期' if state[i - 1] = '卖出'

# 首先量取prices的长度为n，对n进行判断，接着以[0,0]为一个单位对n进行循环得到dp
# dp[][]这两个框前面代表天数，后面代表是否持有股票
# dp[i][0]就是i-1天不持股或者i-1天持股然后i天卖出
# dp[i][1]则不同了，按照我们正常的理解应该是i-1天持股或者i-1天不持股然后第i天持股
# 但是我们这里有一个冷冻期，是需要隔一天的，这里dp[i-2][0]是利润，而dp[i-2][0]有可能是i-3天不持股或者i-3天持股i-2天卖出,
# 无论哪种选择，当到dp[i][1]的时候如果是dp[i-1][0]是没有冷冻期的，只有是dp[i-2][0]中间才有i-1这一天作为冷冻期
# 最后返回dp[-1][0]因为不持股利润是要大于等于持股的(价格等于0相等)


class Solution:
    def maxProfit(self, prices: list[int]) -> int:
        n = len(prices)
        if not n or n < 2:
            return 0
        dp = [[0, 0] for i in range(n)]  # dp的初始化

        dp[0][0] = 0  # 第0天不持股自然就为0了
        dp[0][1] = -prices[0]  # 第0天持股，那么价格就是-prices[0]了
        # 第1天不持股，要么第0天就不持股，要么就是第0天持股，然后第1天卖出
        dp[1][0] = max(dp[0][0], dp[0][1] + prices[1])
        # 第一天持股，要么就是第0天就持股了，要么就是第0天不持股第1天持股
        dp[1][1] = max(dp[0][1], dp[0][0] - prices[1])

        for i in range(2, n):
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])
            dp[i][1] = max(dp[i - 1][1], dp[i - 2][0] - prices[i])
        return dp[-1][0]
