# 最长有效括号
# 题目描述
# 给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。
# 示例 1:
# 输入: "(()"
# 输出: 2
# 解释: 最长有效括号子串为 "()"
# 示例 2:
# 输入: ")()())"
# 输出: 4
# 解释: 最长有效括号子串为 "()()"

# 方法1 利用栈。有效括号肯定是以右括号为结束标志的，所以我们需要找到能够匹配的右括号的字串的长度。现在利用栈底来保存最后
# 一个没有匹配的右括号。遍历字符串，
# 对于"("，将下标进栈；
# 对于")",首先出栈，有两种情况：
# 1.栈不为空，表明当前右括号存在匹配的左括号，属于有效括号，长度为当前下标减去栈顶。
# 2.栈为空，由于前面提到过，栈底保存的是最后一个没有被匹配的右括号，则表明到现在为止，没有可以和当前右括号匹配的左括号，
# 所以当前右括号成为最后一个没有被匹配的右括号，将下标进栈。
# 需要注意的是，如果一开始栈为空，第一个字符为左括号的时候我们会将其放入栈中，这样就不满足提及的「最后一个没有被匹配的右
# 括号的下标」，为了保持统一，我们在一开始的时候往栈中放入一个值为 -1的元素。


class Solution:
    def longestValidParentheses(self, s: str) -> int:
        stack = [-1]
        length = 0
        for i in range(len(s)):
            if s[i] == '(':
                stack.append(i)
            else:
                stack.pop()
                if len(stack) == 0:
                    stack.append(i)
                else:
                    length = max(length, i - stack[len(stack) - 1])
        return length
